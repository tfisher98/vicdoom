# Memory configuration for the C=128

# LD65 2.13.3 special segment documentation 
# * INIT -- init code that can be overwritten once execution reaches main()
# * LOWCODE -- guaranteed not to be banked out 
# * STARTUP -- startup code initializes the C software stack and libraries
# * ZPSAVE -- saves original values of zeropage locations used in ZEROPAGE segment
#
# LD65 git special segment documentation
# * INIT -- kind of non-zero-initialized 'bss' segment used by constructors in startup
# * LOWCODE -- guaranteed not to be banked out
# * ONCE -- used for init code run only once before execution reahces main()
# * STARTUP -- startup code initializes the C software stack and libraries
# * ZPSAVE -- saves original values of zeropage locations used in ZEROPAGE segment
#
# so the new ONCE is the old INIT; there is also a differently defined new INIT segment

SYMBOLS {
    __LOADADDR__: type = import;
    __EXEHDR__: type = import;
    __STACKSIZE__: type = weak, value = $0100; # 256 byte stack; sits at top of RAM
}
MEMORY {
    ZP:        start =  $0002, size = $001A, type = rw, define = yes, file = "";
    STACKCODEMEM: start = $100, size = $A0, define = yes, file = "stackcode";
    SLUTS:     start = $0f00, size = $240, define = yes, file = "sluts";
    LOWCODEMEM: start = $1140, size = $aC0, define = yes, file = "lowcode";
    LOADADDR: start = $1bff, size = $0002, file = %O; #must be 1st item output to file = %O
    HEADER:   start = $1c01, size = $000c, file = %O; #must be 2nd item output to file = %O
    STARTRAM: start = $1c0d, size = $00f3, fill = yes, define = yes, file = %O; #??
    LOWCODEMEM2: start = $1d00, size = $300, fill = yes, define = yes, file = %O;
    UDG:      start = $2000, size = $1700, fill = yes, define = yes, file = %O; #fill larger
    MAIN:     start = $3700, size = $6100, define = yes, file = %O;
    HILUTMEM: start = $9800, size = $800, define = yes, file = %O; # for now we're going to generate the table
    TEX: start = $A000, size = $D00, define = yes, file = "textures";
    HICODEMEM: start = $AD00, size = $100, define = yes, file = "hicode";
    MAPMEM: start = $AE00, size = $970, define = yes, file = "e1m1";
    MUSICMEM: start = $B750, size = $320, define = yes, file = "e1m1mus";
    SOUNDMEM: start = $BA70, size = $370, define = yes, file = "sounds";
    MZPMEM: start = $0002, size = $fd, type = rw, define = yes, file = "modifiedzp1";
    BANK1: start = $0400, size = $fc00, type = rw, define = yes, file = "bank1data";
    BLITMEM: start = $A000, size = $D00, define = yes, file = "blitdata";
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = STARTRAM, type = ro;
    UDGS:     load = UDG, type = rw;
    TEXTURES: load = TEX, type = ro;
    LUTS:     load = SLUTS, type = ro;
    MAPDATA:  load = MAPMEM, type = ro;
    MUSIC:    load = MUSICMEM, type = ro;
    SOUNDS:   load = SOUNDMEM, type = ro;
    STACKCODE: load = STACKCODEMEM, type = rw;
    LOWCODE:  load = LOWCODEMEM, type = rw;
    LOWCODE2:  load = LOWCODEMEM2, type = rw;
    HICODE:   load = HICODEMEM, type = rw;
    HILUTS:   load = HILUTMEM, type = rw;
    ONCE:     load = MAIN, type = ro, optional = yes;
    CODE:     load = MAIN, type = ro;
    RODATA:   load = MAIN, type = ro;
    DATA:     load = MAIN, type = rw;
    INIT:     load = MAIN, type = bss;
    BSS:      load = MAIN, type = bss, define = yes;
    HEAP:     load = MAIN, type = bss, optional = yes; # must sit just below stack
    MODIFIEDZP1: load = MZPMEM, type = zp;
    BANK1DATA: load = BANK1, type = rw;
    BLITDATA: load = BLITMEM, type = rw;
    }
FEATURES {
    CONDES: segment = ONCE,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = interruptor,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}
